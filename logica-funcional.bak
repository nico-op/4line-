#lang racket/gui

(define (sum-values values)
  (cond ((null? values) 0)
        (else (+ (car values) (sum-values (cdr values))))))

<<<<<<< Updated upstream

;; viabilidad: determina la viabilidad.
;; entrada: candidate -> recibe una lista de conjuntos candidatos.
;; salida: booleano -> en #t en caso de ser mayor a cero, #f en caso de ser menor a cero.
(define (viabilidad candidate)
  (cond ((> (sum-values candidate) 0) #t)
        (else #f)))
;; como usar:
;; (viabilidad '(-1 0 1 3 4 5))
=======
(define (is-viable candidate)
  (cond ((> (sum-values candidate) 0) #t)
        (else #f)))


>>>>>>> Stashed changes
